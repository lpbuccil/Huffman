package cs2321;

import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import net.datastructures.*;


/*
 * The format of the compressed file includes 3 continuously parts:
 *  1. prefix tree in bit stream
 *  2. length of the original file using 4 bytes
 *  3. data coded with Huffman coding. 
 * 
 * Encoding prefix tree bit stream: 
 *   if the node is external, output 0, followed by the letter
 *   if the node is internal, output 1, followed by 
 *  		the bit stream of left subtree, then the bit stream of right subtree. 
 */
public class Huffman {
	
	/**
	 * 
	 * Compress file using Huffman code. 
	 *
	 * @param inputFile  The original data file
	 * @param outputFile  The compressed data file that should be generated. 
	 * @return the length of the data encoded with Huffman Code, don't include data for the prefix tree and length of the original file. 
	 */
	public int compress(String inputFile, String outputFile) {
		//TODO: implement the compress
		return 0;
	}
	


	/**
	 * Decode the compressed data file back to the original data file. 
	 * 
	 * @param inputFile : the compressed file
	 * @param outputFile : the file that should be generated by the decode function using ascii code. 
	 */
	public void decode(String inputFile, String outputFile) {	
		//TODO: implement the decode
		return;
	}
	
	
	public static void main(String [ ] args) {
		Huffman huffman = new Huffman();
		int length;
		
		// db.txt has only two letters "ab". The length with Huffman coding should be 2. 
		length = huffman.compress("ab.txt", "ab.txt.huffman");
		System.out.println("length is" + length);
		
		// decode your newly created compress file. The generated file "ab.txt.decoded" should have same content as "ab.txt"
		huffman.decode("ab.txt.huffman", "ab.txt.decoded");
		
		
		// decode the previous correctly compressed file by instructor.  The generated file "ab.txt.decoded" should have content as "ab.txt"
		huffman.decode("ab.txt.compressed", "ab.txt.decoded");


		// You may perform the above same testing for other files, like abra.txt, gogo.txt, tinytinyTable.txt
		
	}
	
	
}
